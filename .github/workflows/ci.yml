name: C/C++ CI with Bazel

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Bazel
      uses: bazel-contrib/setup-bazel@0.15.0
      with:
        bazelisk-version: '1.27.0'
        bazelisk-cache: 'true'
        disk-cache: 'true'
        repository-cache: 'true'
      env:
        PYTHON_BIN_PATH: ${{ env.pythonLocation }}/bin/python

    - name: Build on Windows (rc-free, pinned paths + robust scan)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $ErrorActionPreference = "Stop"
        $ProgressPreference = "SilentlyContinue"

        # ----- Stable absolute roots -----
        $drive = (Get-Location).Path.Substring(0,2)   # e.g. 'D:'
        $ROOT  = "$drive/bzl" -replace '\\','/'
        New-Item -ItemType Directory -Force -Path "$ROOT/tmp","$ROOT/home","$ROOT/out" | Out-Null

        # ----- Clean/process-local env -----
        $env:TMP         = "$ROOT/tmp"
        $env:TEMP        = "$ROOT/tmp"
        $env:TEST_TMPDIR = "$ROOT/tmp"
        $env:HOME        = "$ROOT/home"
        $env:USERPROFILE = "$ROOT/home"

        # Scrub bazel-specific startup envs
        foreach ($k in 'BAZEL_OUTPUT_USER_ROOT','BAZEL_OUTPUT_BASE') {
          [Environment]::SetEnvironmentVariable($k,$null,'Process')
        }

        # Clear any env that is literally "\" or "/"
        $badVals = @('\','/')
        gci env: | ? { $badVals -contains $_.Value } | % {
          Write-Host "Clearing suspicious env: $($_.Name)='$($_.Value)'"
          [Environment]::SetEnvironmentVariable($_.Name,$null,'Process')
        }

        # ----- Static scan for Windows-bad path literals (safe against missing files) -----
        $scanTargets = @('.bazelrc','MODULE.bazel','MODULE.bazel.lock') +
                       (Get-ChildItem -Recurse -Include '*.bzl','BUILD','BUILD.bazel' | % FullName)
        $scanTargets = $scanTargets | ? { Test-Path $_ } | Select-Object -Unique

        $patterns = @(
          'local_repository\s*\([^)]*path\s*=\s*["'']\\["'']',
          'local_repository\s*\([^)]*path\s*=\s*["'']\/["'']',
          'new_local_repository\s*\([^)]*path\s*=\s*["'']\\["'']',
          'new_local_repository\s*\([^)]*path\s*=\s*["'']\/["'']',
          'local_path_override\s*\([^)]*path\s*=\s*["'']\\["'']',
          'local_path_override\s*\([^)]*path\s*=\s*["'']\/["'']',
          # rc entries that set output_* or install_base to just "/" or "\"
          'startup\s+--(output_user_root|output_base|install_base)\s*=\s*[\\/]$',
          'build\s+--(output_user_root|output_base|install_base)\s*=\s*[\\/]$'
        )

        $scanError = $false
        try {
          $hits = @()
          foreach ($p in $patterns) {
            $hits += Select-String -Path $scanTargets -Pattern $p -AllMatches -ErrorAction SilentlyContinue
          }
          if ($hits.Count -gt 0) {
            "=== Suspicious path settings detected ===" | Tee-Object scan-findings.txt
            ($hits | % { "$($_.Path):$($_.LineNumber): $($_.Line)" } | Sort-Object -Unique) |
              Tee-Object -Append scan-findings.txt
            "=========================================" | Tee-Object -Append scan-findings.txt
            Get-Content scan-findings.txt
          }
        } catch {
          $scanError = $true
          "Scan failed: $($_.Exception.Message)" | Tee-Object scan-findings.txt
        }

        # ----- Start from a clean Bazel server with pinned roots -----
        bazel --ignore_all_rc_files --nowatchfs `
              --output_user_root=$ROOT --output_base=$ROOT/out shutdown

        # Info (should show D:/bzl/out etc.)
        bazel --ignore_all_rc_files --nowatchfs `
              --output_user_root=$ROOT --output_base=$ROOT/out info output_base

        # Build & test (pipe logs)
        bazel --ignore_all_rc_files --nowatchfs `
              --output_user_root=$ROOT --output_base=$ROOT/out `
              build //... --verbose_failures --show_timestamps 2>&1 | Tee-Object -FilePath bazel-build.log

        bazel --ignore_all_rc_files --nowatchfs `
              --output_user_root=$ROOT --output_base=$ROOT/out `
              test //... --verbose_failures --show_timestamps 2>&1 | Tee-Object -FilePath bazel-test.log

        # Dump env
        Write-Host "`n=== Path env dump ==="
        gci env: | ? { $_.Name -match 'BAZEL|TEST_TMPDIR|^TMP$|^TEMP$|^HOME$|USERPROFILE|HOMEDRIVE|HOMEPATH' } | sort Name | ft -AutoSize

    - name: Build all targets (Unix)
      if: matrix.os != 'windows-latest'
      run: bazel build //... --config=unix
    
    - name: Test all targets (Unix)
      if: matrix.os != 'windows-latest'
      run: bazel test //... --config=unix
    
    - name: Install Python dependencies and run Python tests
      shell: bash
      run: |
        pip install pytest
        # Copy the Bazel-built extension to the Python package location
        mkdir -p python/src/my_robot_py/
        cp bazel-bin/python/my_robot_py.so python/src/my_robot_py/
        # Add the python directory to PYTHONPATH so tests can find the module
        export PYTHONPATH="${PYTHONPATH}:$(pwd)/python/src"
        pytest tests/python

    - name: Upload Windows logs
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-debug-logs-${{ github.run_id }}
        path: |
          bazel-build.log
          bazel-test.log
          bazel-info.log
          scan-findings.txt
        retention-days: 7

  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run clang-format check (placeholder)
        run: |
          # Placeholder for clang-format check
          echo "Clang-format check would run here."
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Run ruff check (placeholder)
        run: |
          # Placeholder for ruff check
          echo "Ruff check would run here."