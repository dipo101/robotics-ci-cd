name: C/C++ CI with Bazel

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Bazel
      uses: bazel-contrib/setup-bazel@0.15.0
      with:
        bazelisk-version: '1.27.0'
        bazelisk-cache: 'true'
        disk-cache: 'true'
        repository-cache: 'true'
      env:
        PYTHON_BIN_PATH: ${{ env.pythonLocation }}/bin/python

    - name: Sanitize env & build (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $ErrorActionPreference = "Stop"
        # Stable absolute dirs on the current drive (D: on GitHub runners)
        $drive = (Get-Location).Path.Substring(0,2) # e.g. 'D:'
        $ROOT  = "$drive/bzl" -replace '\\','/'
        New-Item -ItemType Directory -Force -Path $ROOT | Out-Null

        # Nuke problematic vars that Bazel/Java read
        foreach ($k in @('BAZEL_OUTPUT_USER_ROOT','BAZEL_OUTPUT_BASE','TEST_TMPDIR','HOME','TMP','TEMP')) {
          $v = [Environment]::GetEnvironmentVariable($k,'Process')
          if ($null -ne $v -and ($v -eq '\' -or $v -eq '/' -or $v -eq '')) {
            [Environment]::SetEnvironmentVariable($k,$null,'Process')
          }
        }

        # Optional: set sane temp/HOME to absolute locations
        $env:TMP  = "$ROOT/tmp"
        $env:TEMP = "$ROOT/tmp"
        $env:HOME = "$ROOT/home"
        New-Item -ItemType Directory -Force -Path $env:TMP,$env:HOME | Out-Null

        # Ensure a clean server with known user root
        bazel --output_user_root=$ROOT shutdown

        # Show where Bazel will write (sanity)
        bazel --output_user_root=$ROOT info release
        bazel --output_user_root=$ROOT info output_base

    - name: Debug environment (Windows only)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        Write-Host "=== Environment Debug Info ==="
        Write-Host "OS: $env:RUNNER_OS"
        Write-Host "Platform: $env:RUNNER_ARCH"
        Write-Host "Python location: ${{ env.pythonLocation }}"
        Write-Host "Current directory: $(Get-Location)"
        Write-Host "Directory contents:"
        Get-ChildItem -Force
        Write-Host "Hidden files:"
        Get-ChildItem -Force -Hidden
        Write-Host "Bazel version:"
        bazel --version
        Write-Host "Bazel info:"
        bazel info
        Write-Host "=== End Environment Debug ==="

    - name: Mount Bazel cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/bazel
          ~/.cache/bazel-repo
        key: bazel-cache-${{ matrix.os }}-${{ github.sha }}
        restore-keys: |
          bazel-cache-${{ matrix.os }}-

    - name: Build all targets (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        # Build with absolute output root
        $drive = (Get-Location).Path.Substring(0,2)
        $ROOT  = "$drive/bzl" -replace '\\','/'
        bazel --output_user_root=$ROOT build //... --verbose_failures --show_timestamps

    - name: Build all targets (Unix)
      if: matrix.os != 'windows-latest'
      run: bazel build //... --config=unix

    - name: Test all targets (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        # Test with absolute output root
        $drive = (Get-Location).Path.Substring(0,2)
        $ROOT  = "$drive/bzl" -replace '\\','/'
        bazel --output_user_root=$ROOT test //... --verbose_failures --show_timestamps

    - name: Test all targets (Unix)
      if: matrix.os != 'windows-latest'
      run: bazel test //... --config=unix
    
    - name: Install Python dependencies and run Python tests
      shell: bash
      run: |
        pip install pytest
        # Copy the Bazel-built extension to the Python package location
        mkdir -p python/src/my_robot_py/
        cp bazel-bin/python/my_robot_py.so python/src/my_robot_py/
        # Add the python directory to PYTHONPATH so tests can find the module
        export PYTHONPATH="${PYTHONPATH}:$(pwd)/python/src"
        pytest tests/python

    - name: Upload debug logs (Windows only)
      if: matrix.os == 'windows-latest' && failure()
      uses: actions/upload-artifact@v4
      with:
        name: windows-debug-logs-${{ github.run_id }}
        path: |
          bazel-build.log
        retention-days: 7

  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run clang-format check (placeholder)
        run: |
          # Placeholder for clang-format check
          echo "Clang-format check would run here."
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Run ruff check (placeholder)
        run: |
          # Placeholder for ruff check
          echo "Ruff check would run here."
