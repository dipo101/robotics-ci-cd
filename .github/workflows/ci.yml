name: C/C++ CI with Bazel

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Bazel
      uses: bazel-contrib/setup-bazel@0.15.0
      with:
        bazelisk-version: '1.27.0'
        bazelisk-cache: 'true'
        disk-cache: 'true'
        repository-cache: 'true'
      env:
        PYTHON_BIN_PATH: ${{ env.pythonLocation }}/bin/python

    - name: Setup Windows environment
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        Write-Host "Setting up Windows environment..."
        # Enable Developer Mode for symlinks
        reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\AppModelUnlock" /t REG_DWORD /f /v "AllowDevelopmentWithoutDevLicense" /d "1"
        # Create Bazel output directories
        New-Item -Path C:/bazel/output -ItemType Directory -Force | Out-Null
        New-Item -Path C:/bazel/output/base -ItemType Directory -Force | Out-Null
        # Set execution policy to allow scripts
        Set-ExecutionPolicy Bypass -Scope Process -Force

    - name: Debug environment (Windows only)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        Write-Host "=== Environment Debug Info ==="
        Write-Host "OS: $env:RUNNER_OS"
        Write-Host "Platform: $env:RUNNER_ARCH"
        Write-Host "Python location: ${{ env.pythonLocation }}"
        Write-Host "Current directory: $(Get-Location)"
        Write-Host "Directory contents:"
        Get-ChildItem -Force
        Write-Host "Hidden files:"
        Get-ChildItem -Force -Hidden
        Write-Host "Bazel version:"
        bazel --version
        Write-Host "Bazel info:"
        bazel info
        Write-Host "Bazel info (detailed):"
        try {
          bazel info --show_make_env
        } catch {
          Write-Host "Bazel info failed: $_"
        }
        Write-Host "=== End Environment Debug ==="

    - name: Mount Bazel cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/bazel
          ~/.cache/bazel-repo
        key: bazel-cache-${{ matrix.os }}-${{ github.sha }}
        restore-keys: |
          bazel-cache-${{ matrix.os }}-

    - name: Build all targets (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        Write-Host "Running Bazel build on Windows with detailed logging..."
        # Create an empty log file first
        New-Item -Path bazel-build.log -ItemType File -Force | Out-Null
        
        # Run Bazel and capture ALL output
        $output = & {
          $ErrorActionPreference = 'Continue'
          & bazel build //... --verbose_failures --show_timestamps --output_base=C:/bazel/output/base 2>&1
          $LASTEXITCODE
        }
        
        # The last line is the exit code
        $exitCode = $output[-1]
        # Remove the exit code from output
        $output = $output[0..($output.Length-2)]
        
        # Save all output to the log file
        $output | Out-File -FilePath bazel-build.log -Encoding UTF8
        
        Write-Host "=== Bazel build log ==="
        Get-Content bazel-build.log
        Write-Host "=== End Bazel build log ==="
        Write-Host "Bazel build completed with exit code: $exitCode"
        
        exit $exitCode

    - name: Build all targets (Non-Windows)
      if: matrix.os != 'windows-latest'
      run: bazel build //...

    - name: Test all targets
      run: bazel test //...
    
    - name: Install Python dependencies and run Python tests
      shell: bash
      run: |
        pip install pytest
        # Copy the Bazel-built extension to the Python package location
        mkdir -p python/src/my_robot_py/
        cp bazel-bin/python/my_robot_py.so python/src/my_robot_py/
        # Add the python directory to PYTHONPATH so tests can find the module
        export PYTHONPATH="${PYTHONPATH}:$(pwd)/python/src"
        pytest tests/python

    - name: Upload debug logs (Windows only)
      if: matrix.os == 'windows-latest' && failure()
      uses: actions/upload-artifact@v4
      with:
        name: windows-debug-logs-${{ github.run_id }}
        path: |
          bazel-build.log
        retention-days: 7

  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run clang-format check (placeholder)
        run: |
          # Placeholder for clang-format check
          echo "Clang-format check would run here."
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Run ruff check (placeholder)
        run: |
          # Placeholder for ruff check
          echo "Ruff check would run here."
